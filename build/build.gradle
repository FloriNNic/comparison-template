def generatedDocFilePath = "."

task initScript() {
    doFirst {
        println "INIT SCRIPT TASK"
        if (!new File("${projectDir}/extracted/oxygen/").exists()) {
            ant.get(src: 'https://www.oxygenxml.com/InstData/Editor/All/oxygen.tar.gz', dest: "${projectDir}/oxygen.tar.gz", skipexisting: 'true')
            ant.untar(src: "${projectDir}/oxygen.tar.gz", dest: "${projectDir}/extracted", compression: 'gzip')

            String key = System.getenv('SCRIPTING_LICENSE_KEY')
            if (key == null) {
                throw new TaskExecutionException(it, new Exception("You need a valid Oxygen Scripting license key."))
            } else {
                new File("${projectDir}/extracted/oxygen/scriptinglicensekey.txt").write(key.replaceAll("  ", "\n"))
            }
        }
    }
    doLast {
        project.exec {
            workingDir "${projectDir}/extracted/oxygen/scripts"
            commandLine 'chmod', '700', 'schemaDocumentation.sh'
        }
    }
}

task generateDoc(type: Exec, dependsOn: [initScript]) {
    // Compute the absolute schema file path depending on where the script is started from.
    String schemaFilePath = "${projectDir}" + (innerBuild.toBoolean() ? "/../schemas/" : "/../../") + schemaFile
    workingDir "${projectDir}/extracted/oxygen"
    println "GENERATE DOC TASK"
    String schemaExtension = schemaFile.lastIndexOf('.').with {it != -1 ? schemaFile[it..<schemaFile.length()] : schemaFile}
    if (schemaExtension == ".xsd") {
        commandLine "scripts/schemaDocumentation.sh", schemaFilePath
    }
    generatedDocFilePath = schemaFilePath.replace(schemaExtension, ".html")

    doLast {
        if (execResult.getExitValue() != 0) {
            println new File(generatedDocFilePath).text
            throw new TaskExecutionException(it, new Exception("Generation failed, see task output for details."))
        }
    }
}

task copyDocFile(type: Copy, dependsOn: [generateDoc]) {
    doLast {
        println "COPY DOC TASK"
        from "${projectDir}/../schemas"
        into "${projectDir}/../doc"
        include '*.html'
    }
}

task postProcessGeneration(dependsOn: [copyDocFile]) {
    doLast {
        println "POSTPROCESS DOC TASK"
        // Replace file locations from GitHub VM with locations from repository.
        ant.replace(
                file: generatedDocFilePath,
                token: 'file:/home/runner/work/oxygen-script-documentation-template/oxygen-script-documentation-template',
                value:  repoMainBranchUrl
        )
        ant.replace(
                file: generatedDocFilePath,
                token: '/home/runner/work',
                value:  ''
        )
    }
}

copyDocFile.shouldRunAfter generateDoc

defaultTasks 'generateDoc'

